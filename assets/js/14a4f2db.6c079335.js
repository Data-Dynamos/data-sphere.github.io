"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[5079],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5846:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:6},o="Exercise 3",l={unversionedId:"data-quality/Exercise-3",id:"data-quality/Exercise-3",title:"Exercise 3",description:"To create singular test to validate type check on all column in aggregateglobalemissions_temperatures model",source:"@site/docs/data-quality/Exercise-3.mdx",sourceDirName:"data-quality",slug:"/data-quality/Exercise-3",permalink:"/docs/data-quality/Exercise-3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-quality/Exercise-3.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Exercise 2",permalink:"/docs/data-quality/Exercise-2"},next:{title:"Exercise 4",permalink:"/docs/data-quality/Exercise-4"}},s={},c=[{value:"To create singular test to validate <code>type check</code> on all column in <code>aggregate_global_emissions_temperatures</code> model",id:"to-create-singular-test-to-validate-type-check-on-all-column-in-aggregate_global_emissions_temperatures-model",level:4}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"exercise-3"},"Exercise 3"),(0,n.kt)("h4",{id:"to-create-singular-test-to-validate-type-check-on-all-column-in-aggregate_global_emissions_temperatures-model"},"To create singular test to validate ",(0,n.kt)("inlineCode",{parentName:"h4"},"type check")," on all column in ",(0,n.kt)("inlineCode",{parentName:"h4"},"aggregate_global_emissions_temperatures")," model"),(0,n.kt)("p",null,"Follow the instructions below using DBT:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open your dbt project and navigate to the tests folder.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"assert_type_check_aggregate_global_emissions_temperatures.sql")," or any suitable name for the singular test file.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the file, define the query to check whether all the columns are in below specified type in ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_global_emissions_temperatures")," table."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"YEAR: INTEGER\nTOTALEMISSIONS: DOUBLE\nLANDAVERAGETEMPERATURE: DOUBLE\nLANDMAXTEMPERATURE: DOUBLE\nLANDMINTEMPERATURE: DOUBLE\nLANDANDOCEANAVERAGETEMPERATURE: DOUBLE\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Specify the table name in the query by referencing the ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_global_emissions_temperatures")," table. You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"ref()")," function to refer to the table. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"FROM {{ ref('aggregate_global_emissions_temperatures') }}"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Define the query in such a way that it should result output if any column has different format whicb is specified in the requirement.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Save the file.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run the dbt test project to validate the result. You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"dbt test")," command in your terminal to see if test case is successfully completed."))))}m.isMDXComponent=!0}}]);