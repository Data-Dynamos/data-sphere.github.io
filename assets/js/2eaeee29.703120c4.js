"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[9627],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3094:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:11},o="Exercise 8",l={unversionedId:"data-quality/Exercise-8",id:"data-quality/Exercise-8",title:"Exercise 8",description:"Exercise: Creating a testyearcolumn Macro in DBT",source:"@site/docs/data-quality/Exercise-8.mdx",sourceDirName:"data-quality",slug:"/data-quality/Exercise-8",permalink:"/data-sphere.github.io/docs/data-quality/Exercise-8",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-quality/Exercise-8.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Exercise 7",permalink:"/data-sphere.github.io/docs/data-quality/Exercise-7"},next:{title:"Exercise 9 (Optional)",permalink:"/data-sphere.github.io/docs/data-quality/Exercise-9"}},s={},c=[{value:"Exercise: Creating a <code>test_year_column</code> Macro in DBT",id:"exercise-creating-a-test_year_column-macro-in-dbt",level:2},{value:"Objective",id:"objective",level:3},{value:"Essential Reading \ud83d\udcd8 Prior to Starting the Exercise",id:"essential-reading--prior-to-starting-the-exercise",level:3},{value:"Instructions",id:"instructions",level:3}],p={toc:c},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exercise-8"},"Exercise 8"),(0,r.kt)("h2",{id:"exercise-creating-a-test_year_column-macro-in-dbt"},"Exercise: Creating a ",(0,r.kt)("inlineCode",{parentName:"h2"},"test_year_column")," Macro in DBT"),(0,r.kt)("h3",{id:"objective"},"Objective"),(0,r.kt)("p",null,"In this exercise, you will create a custom DBT test to ensure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," column in the ",(0,r.kt)("inlineCode",{parentName:"p"},"co2_emissions_by_country")," table (schema ",(0,r.kt)("inlineCode",{parentName:"p"},"carbon_emissions"),") contains only 4-digit values. This is an important validation step to maintain data integrity."),(0,r.kt)("h3",{id:"essential-reading--prior-to-starting-the-exercise"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.getdbt.com/best-practices/writing-custom-generic-tests"},"Essential Reading \ud83d\udcd8 Prior to Starting the Exercise")),(0,r.kt)("h3",{id:"instructions"},"Instructions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create a New Macro File:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Navigate to your DBT project's ",(0,r.kt)("inlineCode",{parentName:"li"},"macros")," directory."),(0,r.kt)("li",{parentName:"ul"},"Create a new file named ",(0,r.kt)("inlineCode",{parentName:"li"},"test_year_column.sql"),"."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Write the Macro:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Open ",(0,r.kt)("inlineCode",{parentName:"li"},"test_year_column.sql")," and define a macro named ",(0,r.kt)("inlineCode",{parentName:"li"},"test_year_column"),"."),(0,r.kt)("li",{parentName:"ul"},"Within the macro, write a Snowflake SQL query that uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"regexp_like")," function to check if the ",(0,r.kt)("inlineCode",{parentName:"li"},"year")," column contains exactly 4 digits.")),(0,r.kt)("p",{parentName:"li"},"Here is a template to start with:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"{% macro test_year_column(model, attribute) %}\n\n                 {# \n             Within the macro, write a Snowflake SQL query that uses the regexp_like function to check if the year column contains exactly 4 digits.\n\n             Table name --\x3e  model \n             column_name (Example Year)\n             #}\n\n{% endmacro %}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Integrate the Test with Your Model:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Go to your ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.yml")," file in the ",(0,r.kt)("inlineCode",{parentName:"li"},"models")," directory."),(0,r.kt)("li",{parentName:"ul"},"Under the ",(0,r.kt)("inlineCode",{parentName:"li"},"co2_emissions_by_country")," model in the ",(0,r.kt)("inlineCode",{parentName:"li"},"carbon_emissions")," schema, add the new ",(0,r.kt)("inlineCode",{parentName:"li"},"test_year_column")," test for the ",(0,r.kt)("inlineCode",{parentName:"li"},"year")," column.")),(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"models:\n  - name: co2_emissions_by_country\n    schema: carbon_emissions\n    columns:\n      - name: year\n        tests:\n          - test_year_column\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Run the Test:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use the DBT CLI to run your tests and validate the implementation ")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\ndbt test \n\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hint:")," on ",(0,r.kt)("inlineCode",{parentName:"li"},"regexp_like")," Command")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"regexp_like")," function is used in Snowflake to determine if a string matches a regular expression pattern."),(0,r.kt)("li",{parentName:"ul"},"In this exercise, the regular expression ",(0,r.kt)("inlineCode",{parentName:"li"},"'^[0-9]{4}$'")," is used to validate that the string has exactly 4 digits.")))}u.isMDXComponent=!0}}]);