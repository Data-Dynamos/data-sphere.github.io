"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[1187],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,c=d["".concat(s,".").concat(h)]||d[h]||m[h]||i;return a?n.createElement(c,o(o({ref:t},u),{},{components:a})):n.createElement(c,o({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2412:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:11,minutesToComplete:20,authors:["plaosunthara"]},o="Spark Workflow and Partitioning",l={unversionedId:"batch-processing/spark-workflow-and-partitioning",id:"batch-processing/spark-workflow-and-partitioning",title:"Spark Workflow and Partitioning",description:"Optimisation",source:"@site/docs/batch-processing/spark-workflow-and-partitioning.mdx",sourceDirName:"batch-processing",slug:"/batch-processing/spark-workflow-and-partitioning",permalink:"/docs/batch-processing/spark-workflow-and-partitioning",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/batch-processing/spark-workflow-and-partitioning.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,minutesToComplete:20,authors:["plaosunthara"]},sidebar:"tutorialSidebar",previous:{title:"Want to learn more about the Spark UI? (Bonus)",permalink:"/docs/batch-processing/learn-more-about-the-spark-ui"},next:{title:"Exercise: Gold",permalink:"/docs/batch-processing/exercise-gold-2"}},s={},p=[{value:"Optimisation",id:"optimisation",level:2},{value:"Partitioning",id:"partitioning",level:2},{value:"Working with Partitioned Data",id:"working-with-partitioned-data",level:2},{value:"Partitioning FAQs",id:"partitioning-faqs",level:2},{value:"Shuffling",id:"shuffling",level:2},{value:"Spark Operations",id:"spark-operations",level:3},{value:"Shuffles in Spark",id:"shuffles-in-spark",level:3},{value:"Operations that create a shuffle",id:"operations-that-create-a-shuffle",level:3},{value:"Acceptable Shuffles and Avoiding Shuffles",id:"acceptable-shuffles-and-avoiding-shuffles",level:3},{value:"Resources (Bonus)",id:"resources-bonus",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spark-workflow-and-partitioning"},"Spark Workflow and Partitioning"),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("figure",{class:"video-container"},(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/5HjbnUEBE5g",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"allowfullscreen"}))),(0,r.kt)("h2",{id:"optimisation"},"Optimisation"),(0,r.kt)("p",null,"At this point, we've wrangled/transformed our data...but how do we actually optimize our job\u2019s performance?\n",(0,r.kt)("strong",{parentName:"p"},"Golden Rule:")," In the real world, make sure your dataset/table is partitioned well."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lots of small files are the enemy!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Having lots of tiny files will result in S3 needing to do lots of ",(0,r.kt)("strong",{parentName:"li"},"file listing")," operations. These are extremely slow and can even be expensive"),(0,r.kt)("li",{parentName:"ul"},"Lots of small files means lots of data shuffling through the network. ",(0,r.kt)("strong",{parentName:"li"},"This is slow!")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HUGE")," files are also bad",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Having too few files (all being huge) means you probably won\u2019t take advantage of all of the cores in your cluster. In other words, the data can\u2019t be easily distributed around the cluster"),(0,r.kt)("li",{parentName:"ul"},"Each node in your cluster might even have to try and break down each of these huge files in order to redistribute some data to other nodes. This is a waste of time and money (",(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=982wFqC03v8&ab_channel=pyromaniack"},"to emphasise the point"),"). ")))),(0,r.kt)("p",null,"So what\u2019s a suitable strategy?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'There\u2019s no "best" number. In parquet, try to target each ',(0,r.kt)("inlineCode",{parentName:"li"},".snappy.parquet")," file to be somewhere ",(0,r.kt)("strong",{parentName:"li"},"roughly between 256MB to 1GB")),(0,r.kt)("li",{parentName:"ul"},"More importantly, make sure that you\u2019re partitioning on columns that you frequently ",(0,r.kt)("strong",{parentName:"li"},"filter")," or do ",(0,r.kt)("strong",{parentName:"li"},"groupBy")," on (another reason to be Product-minded and ask your consumers what kinds of questions they'll need answered by your data)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DO NOT")," partition on columns with high cardinality (e.g. a userId, which has millions of distinct values)\nthis will result in lots of ",(0,r.kt)("strong",{parentName:"li"},"small files and lots of file listing operations"))),(0,r.kt)("h2",{id:"partitioning"},"Partitioning"),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"partitioning.png",src:a(8277).Z,width:"379",height:"477"}))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Partitioning strategy is the most important decision we have to get right!")),(0,r.kt)("p",null,"If your partitioning strategy is decent, you\u2019ll most likely be fine and won\u2019t need to tweak other knobs.\nEspecially going forward in the future with Spark 3.0\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://databricks.com/blog/2020/05/29/adaptive-query-execution-speeding-up-spark-sql-at-runtime.html"},"Adaptive Query Execution (AQE)"),", a lot of optimizations will be automated for you!"),(0,r.kt)("p",null,"So how does a partitioned table look?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It would actually look like a bunch of hierarchical folders"),(0,r.kt)("li",{parentName:"ul"},"The partitioning values become their own folder (e.g. year=2018)"),(0,r.kt)("li",{parentName:"ul"},"The underlying data will be at the bottom of the hierarchy and will"),(0,r.kt)("li",{parentName:"ul"},"often have a ",(0,r.kt)("inlineCode",{parentName:"li"},".snappy.parquet")," file extension (if using Spark and Parquet)")),(0,r.kt)("p",null,"Can you give me an example?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Partitioning the table based on some notion of time is a popular option\n(check if that makes sense for your consumers and your use case though!)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. assuming each day of data for the table is of the order of 128MB - 1GB, then\nyour partitioning keys can be (\u201cyear\u201d, \u201cmonth\u201d, \u201cday\u201d)"))),(0,r.kt)("li",{parentName:"ul"},"You don\u2019t need to explicitly define all the values, Spark will smartly\ncreate a new partition for each distinct combination of your partitioning values")),(0,r.kt)("h2",{id:"working-with-partitioned-data"},"Working with Partitioned Data"),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("figure",{class:"video-container"},(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/fhEJG2oFCm8",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"allowfullscreen"}))),(0,r.kt)("h2",{id:"partitioning-faqs"},"Partitioning FAQs"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"So...is a parquet file a file or a folder of files?"),"Either!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"With a single-node library like ",(0,r.kt)("a",{parentName:"li",href:"https://pandas.pydata.org/"},"Pandas"),", you can write a single ",(0,r.kt)("inlineCode",{parentName:"li"},".snappy.parquet")," file if you want"),(0,r.kt)("li",{parentName:"ul"},"In the real-world they are often folders of partitions",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This way you can read/write an entire table with just one path (the root of the table)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"s3://my-bucket/my-table/")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"s3://my-bucket/my-table.parquet/")," (both of these styles are still folders)"),(0,r.kt)("li",{parentName:"ul"},"Underneath all the partitioning folders, you will find ",(0,r.kt)("inlineCode",{parentName:"li"},".snappy.parquet")," files"))),(0,r.kt)("li",{parentName:"ul"},"The query engine (e.g. Spark or Presto) will then take care of understanding the partitioning structure of the table and will optimize your queries around that"),(0,r.kt)("li",{parentName:"ul"},"Spark will always write the output of a DataFrame as a folder at the root level rather than a single file (because it\u2019s designed for distributed/concurrent reading/writing of data, which often involves multiple files)")))),(0,r.kt)("h2",{id:"shuffling"},"Shuffling"),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"shuffling.png",src:a(3096).Z,width:"424",height:"512"})),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://blog.scottlogic.com/2018/03/22/apache-spark-performance.html#:~:text=A%20shuffle%20occurs%20when%20data,likely%20on%20a%20different%20executor."},"Reference"))),(0,r.kt)("h3",{id:"spark-operations"},"Spark Operations"),(0,r.kt)("p",null,"There are 2 kind of operations available in Apache Spark"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Transformations")),(0,r.kt)("p",{parentName:"li"},"Transformations are lazy operations which usually create or transform the data in one or other way. For example:"),(0,r.kt)("p",{parentName:"li"},"a) ",(0,r.kt)("strong",{parentName:"p"},"range (1,10)")," transformation creates a dataset of 10 variables ranging from 0 to 9."),(0,r.kt)("p",{parentName:"li"},"b) ",(0,r.kt)("strong",{parentName:"p"},"filter(x > 10)")," will return all variables greater than 10 from the dataset by the name x."),(0,r.kt)("p",{parentName:"li"},"Transformations themselves are of two types:"),(0,r.kt)("p",{parentName:"li"},"a) ",(0,r.kt)("strong",{parentName:"p"},"Narrow Transformations"),": These transformations do not entail any network  communication (e.g. range and filter transformations)"),(0,r.kt)("p",{parentName:"li"},"b) ",(0,r.kt)("strong",{parentName:"p"},"Wide Transformations"),": These transformations do entail network communication (e.g. groupBy, joins, repartition). Wide Transformations usually result in redistributing data across partitions (also known as shuffling of data, section below)). Redistribution is defining behaviour in wide transformations.For example,  a ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy")," redistributes  data across partitions by the key on which grouping is needed. A ",(0,r.kt)("inlineCode",{parentName:"p"},"join")," redistributes data across partitions to match joining keys.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Actions")),(0,r.kt)("p",{parentName:"li"},"Actions in Spark are eager operations that trigger the execution of logic. For example, a ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," action triggers a job to count the number of variable created or present in a dataset. A ",(0,r.kt)("inlineCode",{parentName:"p"},"collect")," collects all the data from the partitions and returns some output. Actions are usually written towards the end of your code after all the transformations are completed."))),(0,r.kt)("h3",{id:"shuffles-in-spark"},"Shuffles in Spark"),(0,r.kt)("p",null,"Wide operations within Spark trigger an event known as the shuffle. The shuffle is Spark\u2019s mechanism for redistribution. This typically involves copying data across executors and machines, making the shuffle a complex and costly operation and should be avoided as much as possible, unless it is absolutely necessary."),(0,r.kt)("h3",{id:"operations-that-create-a-shuffle"},"Operations that create a shuffle"),(0,r.kt)("p",null,"Shuffles in Spark usually come into the picture when a wide transformation (like groupBy, joins, repartition etc) is used in transformation logic. Let us take the example of a ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy")," transformation to understand this better. Spark programs usually read the data in the form of in-memory partitions. The data in these partitions is distributed across different machines on the cluster and is by default not grouped on a particular field. If we apply ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy")," on a certain field like ",(0,r.kt)("inlineCode",{parentName:"p"},"country")," for example, the Spark runtime will have to shuffle the data across the initial in-memory partitions to make sure that all the data from the same country  moves to the same partition."),(0,r.kt)("h3",{id:"acceptable-shuffles-and-avoiding-shuffles"},"Acceptable Shuffles and Avoiding Shuffles"),(0,r.kt)("p",null,"As you might have guessed by now, shuffling is a necessary evil, especially for wide transformations in Spark. A data shuffle happens if we are using transformations like groupBy, joins and repartition. Since shuffles are expensive, the best way to avoid them would be to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"write your logic  using narrow transformations like map, flatmaps and filter."),(0,r.kt)("li",{parentName:"ol"},"use wide transformations only when required and no other alternative is available in narrow transformations."),(0,r.kt)("li",{parentName:"ol"},"use wide transformations as late as possible or towards the end of your logic (e.g.join only at the end of your logic)")),(0,r.kt)("h2",{id:"resources-bonus"},"Resources (Bonus)"),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"fear-path-to-dark-side.png",src:a(9552).Z,width:"512",height:"288"}))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.rockthejvm.com/spark-dags/"},"Spark DAGs and planning")," (optional)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Just know that bad partitioning \u2192 shuffling \u2192 pain (must-watch)"),(0,r.kt)("li",{parentName:"ul"},"You can check how \u2018shuffly\u2019 your Spark job looks by viewing the DAG"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mungingdata.com/apache-spark/partitionby/"},"Managing Partitioning"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Important: understand that repartition() and DataFrame.write.partitionBy() are ",(0,r.kt)("strong",{parentName:"li"},"not")," the same thing",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Repartition can take in 2 different types of arguments:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a number: controls the number of .snappy.parquet files"),(0,r.kt)("li",{parentName:"ul"},"a bunch of column names: it will ensure 1 .snappy.parquet file per each distinct combination of your provided columns"))),(0,r.kt)("li",{parentName:"ul"},"DataFrame.write.partitionBy defines the folder structure of the table ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"however, it does not guarantee how many .snappy.parquet files will be in each folder "))),(0,r.kt)("li",{parentName:"ul"},"Sometimes you might even need to do both e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"df.repartition(\u201cyear\u201d, \u201cmonth\u201d).write.partitionBy(\u201cyear\u201d, \u201dmonth\u201d)...")," in order to guarantee exactly 1 .snappy.parquet file per each month folder"))),(0,r.kt)("li",{parentName:"ul"},"Try to read up on the difference between repartition and coalesce ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Short Answer: ",(0,r.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/2.1.0/api/python/pyspark.sql.html#pyspark.sql.DataFrame.coalesce"},"The coalesce transformation applied to a DataFrame")," (not to be confused with ",(0,r.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/latest/api/python//reference/pyspark.sql/api/pyspark.sql.functions.coalesce.html"},"coalesce() applied to a column"),"), will try to merge partitions to reach your desired number. You only use coalesce when you want to reduce the number of partitions in your data."),(0,r.kt)("li",{parentName:"ul"},"On the other hand, repartition() will full shuffle all of the data around (more expensive)."),(0,r.kt)("li",{parentName:"ul"},"If you need to increase the number of partitions in your data, then you will need repartition()")))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," - If not done already, it will be a good idea to revise the repartitioning and partition by videos from ",(0,r.kt)("a",{parentName:"p",href:"../data-engineering-the-good-parts/011-demo-vanilla-spark.md"},"here")," before attempting the below exercise"),(0,r.kt)("p",null,"Follow the instructions ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/data-derp/small-exercises/tree/master/databricks-repartition-vs-write-partition-by#readme"},"here")," to import the repartitioning exercise notebook"))}m.isMDXComponent=!0},9552:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/fear-path-to-dark-side-02df5aba18d3a6b7209b559ad8883194.png"},8277:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/partitioning-ac6b6c56d48894919e4f9058a0a8ab9c.png"},3096:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/shuffling-ed3cfadd55c02ea6dddadb4cb0f42f96.png"}}]);