"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[1361],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=n,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return a?r.createElement(h,i(i({ref:t},m),{},{components:a})):r.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3191:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3,authors:["syed","kmok"],minutesToComplete:20},i="Spark Structured Streaming",s={unversionedId:"beyond-the-batch/spark-structured-streaming",id:"beyond-the-batch/spark-structured-streaming",title:"Spark Structured Streaming",description:"Spark Structured Streaming is the streaming module of the Apache Spark framework. It provides a fast, scalable, fault-tolerant stream processing engine built on top of Spark SQL module with multi-delivery semantics. In fact, Spark Streaming APIs are an extension or superset of Spark SQL API. The module, by default, provides a low latency (with end-to-end latencies as low as 100 milliseconds) micro-batching features. Additionally, from Spark 2.3 onwards, a new low-latency processing mode called Continuous Processing was introduced, which can achieve end-to-end latencies as low as 1 millisecond with at-least-once guarantees. Please note that Continuous mode is still experimental as of Spark 3.x.",source:"@site/docs/beyond-the-batch/spark-structured-streaming.mdx",sourceDirName:"beyond-the-batch",slug:"/beyond-the-batch/spark-structured-streaming",permalink:"/docs/beyond-the-batch/spark-structured-streaming",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/beyond-the-batch/spark-structured-streaming.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,authors:["syed","kmok"],minutesToComplete:20},sidebar:"tutorialSidebar",previous:{title:"Intro to Streaming",permalink:"/docs/beyond-the-batch/intro-to-streaming"},next:{title:"Stateful vs. Stateless Streaming",permalink:"/docs/beyond-the-batch/stateful-vs-stateless-streaming"}},l={},p=[],m={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"spark-structured-streaming"},"Spark Structured Streaming"),(0,n.kt)("p",null,"Spark Structured Streaming is the streaming module of the Apache Spark framework. It provides a fast, scalable, fault-tolerant stream processing engine built on top of Spark SQL module with multi-delivery semantics. In fact, Spark Streaming APIs are an extension or superset of Spark SQL API. The module, by default, provides a low latency (with end-to-end latencies as low as 100 milliseconds) micro-batching features. Additionally, from Spark 2.3 onwards, a new low-latency processing mode called Continuous Processing was introduced, which can achieve end-to-end latencies as low as 1 millisecond with at-least-once guarantees. Please note that Continuous mode is still experimental as of Spark 3.x."),(0,n.kt)("p",null,"Reading and Writing in Spark Structured Streaming is different from reading and writing in Spark SQL (used in batch transformations)."),(0,n.kt)("p",null,"Here is an example of a CSV file read in Spark SQL:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'temp_df = spark.read \\\n        .option("header", "True") \\\n        .format("csv") \\\n        .load(file_path2)\n')),(0,n.kt)("p",null,"And a similar example in Spark Structured Streaming where we read data from a socket source. Note: there are other ",(0,n.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#creating-streaming-dataframes-and-streaming-datasets"},"sources")," available in the API, such as: File Source, Kafka Source and Rating Source."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'lines = spark \\\n    .readStream \\\n    .format("socket") \\\n    .option("host", "localhost") \\\n    .option("port", 9999) \\\n    .load()\n')),(0,n.kt)("p",null,"A few interesting points to note from the above code snippets :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The read operations in both the examples are quite similar (spark.read in case of Spark SQL and a similar spark.readStream for Spark Streaming)."),(0,n.kt)("li",{parentName:"ol"},"Both the examples create dataframes (temp_df and lines df)."),(0,n.kt)("li",{parentName:"ol"},"Both examples use the same optimised Spark SQL engine."),(0,n.kt)("li",{parentName:"ol"},"The Spark SQL example uses the format operation to specify the format of data being read. Quite similarly, the Spark Streaming example uses the format operation to specify the source from where the data is read."),(0,n.kt)("li",{parentName:"ol"},"Options is another useful operation which can be seen in both the example"),(0,n.kt)("li",{parentName:"ol"},"Finally the load method, which in case of Spark SQL starts loading the data from the given path, whereas in case of Spark Streaming, it starts a read thread from the given source.")),(0,n.kt)("p",null,"There are similarities in writing the data too. Let us see this again with an example."),(0,n.kt)("p",null,"This is how the write code is written in Spark SQL:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'df.write\\\n    .option("header", "true")\\\n    .format("csv")\\\n    .save(f\'{OUTPUT_DIR}/sample-write\')\n')),(0,n.kt)("p",null,"A similar example in Spark Streaming for writing a stream:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'query = lines_DF \\\n    .writeStream \\\n    .outputMode("append") \\\n    .format("console") \\\n    .start()\n')),(0,n.kt)("p",null,"A few notes about the two \u201cwrite\u201d code snippets :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The write operations in both the examples are again quite similar (spark.write in case of Spark SQL and a similar spark.writeStream for Spark Streaming)."),(0,n.kt)("li",{parentName:"ol"},"Both the examples write their respective dataframes (df for Spark SQL and lines_DF for Spark Streaming) to an external location ."),(0,n.kt)("li",{parentName:"ol"},"Both examples use the same optimised Spark SQL engine while writing the data."),(0,n.kt)("li",{parentName:"ol"},"The Spark SQL example uses the format operation to specify the format in which the data is written. Quite similarly, the Spark Streaming example uses the format operation to specify where the data would be written. Spark Streaming calls it a sink (console in the above example. Details on other types of sinks can be found ",(0,n.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#output-sinks"},"here"),")"),(0,n.kt)("li",{parentName:"ol"},"Finally the \u201csave\u201d method in Spark SQL example which is a Spark Action and triggers the write to the external location. The corresponding Action in Spark Streaming is \u201cstart\u201d which triggers the write thread to the console.")),(0,n.kt)("p",null,"Now in the write example for Spark Streaming code snippet above, you might have observed that an operation called \u201coutputMode\u201d is being used. This operation specifies what gets written to the output sink. There are few output mode options available as follows :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Append Mode (Default)")," - Append mode is like an \u201cinsert only\u201d operation. This mode is most useful for stateless use cases where we want to just process the data on a per-micro batch without maintaining any state across the micro batches."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Update Mode (Default)")," - This mode is like an upsert operation where the old records are updated and new records are added."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Complete Mode (Default)")," - This is the mode where all the data is maintained and stored by Spark run time. This mode is most useful in stateful use cases where we want to maintain state across the micro batches.")),(0,n.kt)("p",null,"More details regarding output modes can be found ",(0,n.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#output-modes"},"here"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"References (Bonus)")),(0,n.kt)("p",null,"A complete reference structured streaming including all the concepts explained above can be found ",(0,n.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html"},"here")))}d.isMDXComponent=!0}}]);