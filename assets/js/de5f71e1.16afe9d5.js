"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[6291],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},845:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:5},i="Exercise 2",l={unversionedId:"data-quality/Exercise-2",id:"data-quality/Exercise-2",title:"Exercise 2",description:"To create singular test to validate format check on Year column in aggregateglobaltemperatures model",source:"@site/docs/data-quality/Exercise-2.mdx",sourceDirName:"data-quality",slug:"/data-quality/Exercise-2",permalink:"/docs/data-quality/Exercise-2",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-quality/Exercise-2.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Exercise 1",permalink:"/docs/data-quality/Exercise-1"},next:{title:"Exercise 3",permalink:"/docs/data-quality/Exercise-3"}},c={},s=[{value:"To create singular test to validate <code>format check</code> on <code>Year</code> column in <code>aggregate_global_temperatures</code> model",id:"to-create-singular-test-to-validate-format-check-on-year-column-in-aggregate_global_temperatures-model",level:4}],p={toc:s},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"exercise-2"},"Exercise 2"),(0,n.kt)("h4",{id:"to-create-singular-test-to-validate-format-check-on-year-column-in-aggregate_global_temperatures-model"},"To create singular test to validate ",(0,n.kt)("inlineCode",{parentName:"h4"},"format check")," on ",(0,n.kt)("inlineCode",{parentName:"h4"},"Year")," column in ",(0,n.kt)("inlineCode",{parentName:"h4"},"aggregate_global_temperatures")," model"),(0,n.kt)("p",null,"Follow the instructions below using DBT:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open your dbt project and navigate to the tests folder.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"assert_year_format_aggregate_global_temperatures.sql")," or any suitable name for the singular test file.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the file, define the query to check whether the ",(0,n.kt)("inlineCode",{parentName:"p"},"year")," column is in YYYY format in ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_global_emissions")," view.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Specify the view name in the query by referencing the ",(0,n.kt)("inlineCode",{parentName:"p"},"aggregate_global_temperatures")," view. You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"ref()")," function to refer to the view. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"FROM {{ ref('aggregate_global_temperatures') }}"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Define the query in such a way that it should result output if any row has format other than YYYY format in ",(0,n.kt)("inlineCode",{parentName:"p"},"year")," column.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Save the file.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run the dbt test project to validate the result. You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"dbt test")," command in your terminal to see if test case is successfully completed."))))}m.isMDXComponent=!0}}]);