"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[1736],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>h});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var c=r.createContext({}),d=function(t){var e=r.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},p=function(t){var e=d(t.components);return r.createElement(c.Provider,{value:e},t.children)},m="mdxType",l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=d(a),u=n,h=m["".concat(c,".").concat(u)]||m[u]||l[u]||o;return a?r.createElement(h,s(s({ref:e},p),{},{components:a})):r.createElement(h,s({ref:e},p))}));function h(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[m]="string"==typeof t?t:n,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9529:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:10,minutesToComplete:5,authors:["syed","kmok"]},s="Sharing Streaming Data",i={unversionedId:"beyond-the-batch/sharing-streaming-data",id:"beyond-the-batch/sharing-streaming-data",title:"Sharing Streaming Data",description:"In the prior examples, we've displayed our resulting aggregated stream data in the console. In the scenario where we would like to share the results of our aggregated streaming data with others, we can write that to a remote data store in the form of csv, json, parquet, and other formats similar to writing Batch data to remote data stores (Sink). It is also possible to write directly to Transactional databases, such as Cassandra or DynamoDB or even back to a Kafka topic. Spark supports writes to certain remote data stores out of the box (e.g. Cassandra) and some require leveraging the foreach operator plus some custom code to interact directly with the remote data store.",source:"@site/docs/beyond-the-batch/sharing-streaming-data.mdx",sourceDirName:"beyond-the-batch",slug:"/beyond-the-batch/sharing-streaming-data",permalink:"/data-dynamos.github.io/docs/beyond-the-batch/sharing-streaming-data",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/beyond-the-batch/sharing-streaming-data.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,minutesToComplete:5,authors:["syed","kmok"]},sidebar:"tutorialSidebar",previous:{title:"Stateful Streaming in a Nutshell",permalink:"/data-dynamos.github.io/docs/beyond-the-batch/stateful-streaming-nutshell"},next:{title:"Exercise: Streaming",permalink:"/data-dynamos.github.io/docs/beyond-the-batch/exercise-streaming"}},c={},d=[{value:"Writing to Cassandra",id:"writing-to-cassandra",level:2},{value:"Writing to DynamoDB",id:"writing-to-dynamodb",level:2}],p={toc:d},m="wrapper";function l(t){let{components:e,...a}=t;return(0,n.kt)(m,(0,r.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"sharing-streaming-data"},"Sharing Streaming Data"),(0,n.kt)("p",null,"In the prior examples, we've displayed our resulting aggregated stream data in the console. In the scenario where we would like to share the results of our aggregated streaming data with others, we can write that to a remote data store in the form of csv, json, parquet, and other formats similar to writing Batch data to remote data stores (Sink). It is also possible to write directly to Transactional databases, such as ",(0,n.kt)("a",{parentName:"p",href:"https://docs.databricks.com/structured-streaming/examples.html#write-to-cassandra-as-a-sink-for-structured-streaming-in-python"},"Cassandra")," or ",(0,n.kt)("a",{parentName:"p",href:"https://docs.databricks.com/structured-streaming/examples.html#write-to-amazon-dynamodb-using-foreach-in-scala-and-python"},"DynamoDB")," or even back to a Kafka topic. Spark supports writes to certain remote data stores out of the box (e.g. Cassandra) and some require leveraging the ",(0,n.kt)("inlineCode",{parentName:"p"},"foreach")," operator plus some custom code to interact directly with the remote data store."),(0,n.kt)("h2",{id:"writing-to-cassandra"},"Writing to Cassandra"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'spark.conf.set("spark.cassandra.connection.host", "host1,host2")\n\ndf.writeStream \\\n  .format("org.apache.spark.sql.cassandra") \\\n  .outputMode("append") \\\n  .option("checkpointLocation", "/path/to/checkpoint") \\\n  .option("keyspace", "keyspace_name") \\\n  .option("table", "table_name") \\\n  .start()\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.databricks.com/structured-streaming/examples.html#write-to-cassandra-as-a-sink-for-structured-streaming-in-python"},"Source")),(0,n.kt)("h2",{id:"writing-to-dynamodb"},"Writing to DynamoDB"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from pyspark.sql.functions import *\n\nspark.conf.set("spark.sql.shuffle.partitions", "1")\n\nquery = (\n  spark.readStream.format("rate").load()\n    .selectExpr("value % 10 as key")\n    .groupBy("key")\n    .count()\n    .toDF("key", "count")\n    .writeStream\n    .foreach(SendToDynamoDB_ForeachWriter())  # => custom code. See https://docs.databricks.com/structured-streaming/examples.html#write-to-amazon-dynamodb-using-foreach-in-scala-and-python for details.\n    .outputMode("update")\n    .start()\n)\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.databricks.com/structured-streaming/examples.html#write-to-amazon-dynamodb-using-foreach-in-scala-and-python"},"Source")))}l.isMDXComponent=!0}}]);