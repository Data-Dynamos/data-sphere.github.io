"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[8272],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(a),c=i,u=m["".concat(l,".").concat(c)]||m[c]||h[c]||r;return a?n.createElement(u,o(o({ref:t},p),{},{components:a})):n.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8250:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:6,authors:["syed","kmok"],minutesToComplete:45},o="Handling Late Data",s={unversionedId:"beyond-the-batch/handling-late-data",id:"beyond-the-batch/handling-late-data",title:"Handling Late Data",description:"We have seen that Spark Structured applications can store and aggregate data across micro-batches. Spark runtime stores this data in what Spark calls a statestore. This statestore uses the executor memory of the worker machines. Now a couple of questions have probably crossed your mind:",source:"@site/docs/beyond-the-batch/handling-late-data.mdx",sourceDirName:"beyond-the-batch",slug:"/beyond-the-batch/handling-late-data",permalink:"/data-sphere.github.io/docs/beyond-the-batch/handling-late-data",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/beyond-the-batch/handling-late-data.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,authors:["syed","kmok"],minutesToComplete:45},sidebar:"tutorialSidebar",previous:{title:"Checkpointing",permalink:"/data-sphere.github.io/docs/beyond-the-batch/checkpointing"},next:{title:"Stateful Streaming in a Nutshell",permalink:"/data-sphere.github.io/docs/beyond-the-batch/stateful-streaming-nutshell"}},l={},d=[{value:"Time Windows",id:"time-windows",level:2},{value:"Tumbling Time windows",id:"tumbling-time-windows",level:3},{value:"Handing Late Data",id:"handing-late-data",level:3},{value:"Data Clean Up with Watermarks",id:"data-clean-up-with-watermarks",level:3},{value:"Sliding Time Windows",id:"sliding-time-windows",level:3},{value:"Sliding Time Windows with Watermarks",id:"sliding-time-windows-with-watermarks",level:3},{value:"Conclusion",id:"conclusion",level:3}],p={toc:d},m="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handling-late-data"},"Handling Late Data"),(0,i.kt)("p",null,"We have seen that ",(0,i.kt)("a",{parentName:"p",href:"/data-sphere.github.io/docs/beyond-the-batch/stateful-vs-stateless-streaming"},"Spark Structured applications can store and aggregate data across micro-batches"),". Spark runtime stores this data in what Spark calls a ",(0,i.kt)("inlineCode",{parentName:"p"},"statestore"),". This statestore uses the executor memory of the worker machines. Now a couple of questions have probably crossed your mind:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Does Spark statestore store the data forever? Yes, at least until the application crashes or it is brought down for routine housekeeping. Spark Streaming applications are designed to handle these kinds of interruptions in this fashion."),(0,i.kt)("li",{parentName:"ol"},"Should we keep the data in the statestore of the Spark Streaming Application forever? Well, not really, for 2 reasons below:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"As mentioned above, the statestore uses the executor memory which is finite and will sooner or later get exhausted. This usually results in either the Spark job being stuck for a very long time or ultimately crashing."),(0,i.kt)("li",{parentName:"ol"},"The use case might not require you to store the data forever. For example, you may have an application where you would want to see the running totals of the invoices of the last 1 hour. Every hour, you would want to move the data to an external storage and clean the statestore.")))),(0,i.kt)("p",null,"Above are just a few examples where you might not want to maintain the data in your application forever. This is where the concept of windows and late data comes into picture."),(0,i.kt)("h2",{id:"time-windows"},"Time Windows"),(0,i.kt)("p",null,"Windows are an important temporal concept for managing data and its state in Spark Streaming applications. They are the time intervals on which we can segregate and aggregate the incoming streaming data from the source. The time for which such windows are created is usually the Event Time i.e the timestamp for which the data was generated at the source. Please note that the aforementioned Event Time is different from the Trigger time, which is the start time of the micro-batch by the Spark runtime. Also note that Time Windows are used only for Stateful Spark Streaming applications because, afterall, we are trying to efficiently manage the state so that our applications do not store the data forever."),(0,i.kt)("p",null,"There are two types of Time Windows in Spark Streaming:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tumbling Time windows"),(0,i.kt)("li",{parentName:"ul"},"Sliding Time windows")),(0,i.kt)("h3",{id:"tumbling-time-windows"},"Tumbling Time windows"),(0,i.kt)("p",null,"Tumbling Windows are fixed, non-overlapping and contiguous (or back-to-back) time windows that we can create based on the Event time. For Eg. A 15 minute tumbling window can be created for data generated between 12:00 PM to 12:15 PM, 12:15 PM to 12:30 PM and so on. Let us understand the concept of tumbling window in more detail with the help of an example below:"),(0,i.kt)("p",null,"Let\u2019s say we are developing an application which is processing the data generated from a stock market application. The stock market application is sending data in the following on periodic basis to our application:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"EventTime"),(0,i.kt)("td",{parentName:"tr",align:"center"},"String")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"Symbol"),(0,i.kt)("td",{parentName:"tr",align:"center"},"String")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"Price"),(0,i.kt)("td",{parentName:"tr",align:"center"},"String")))),(0,i.kt)("p",null,"Our application should receive the above data and create a ",(0,i.kt)("strong",{parentName:"p"},"1 minute tumbling time window"),". Also, to demonstrate the windowing aggregates, our application should sum up all the prices for the stock symbol generated within each time window of 1 minute."),(0,i.kt)("p",null,"To implement the above example, we will use the netcat application (Socket Source) from our previous ",(0,i.kt)("a",{parentName:"p",href:"/data-sphere.github.io/docs/beyond-the-batch/checkpointing"},"examples")," to simulate data streaming from the stock market application. Note: the full application code below can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/data-derp/exercise-vanilla-spark/tree/main/src"},"here"),"; please follow the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/data-derp/exercise-vanilla-spark/tree/main#readme"},"README")," to ensure that all dependencies are satisfied before running it. We will start by writing the Spark Streaming code for the above application requirement to receive the ",(0,i.kt)("inlineCode",{parentName:"p"},"Event Time, Symbol, Price")," from the source:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Start with reading the data from the source"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},' spark = SparkSession \\\n     .builder \\\n     .appName("Tumbling Window Wordcount") \\\n     .getOrCreate()\n\n spark.sparkContext.setLogLevel("ERROR")\n\n socketStreamDF = spark.readStream \\\n     .format("socket") \\\n     .option("host", "localhost") \\\n     .option("port", 9999) \\\n     .load()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Split the data and create columns like ",(0,i.kt)("inlineCode",{parentName:"p"},"EventTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Price")," and store the reference in ",(0,i.kt)("inlineCode",{parentName:"p"},"stocksDF")," dataframe"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'stocksDF = socketStreamDF.withColumn("value", split("value", ","))\\\n    .withColumn("EventTime", to_timestamp(col("value")[0], "yyyy-MM-dd HH:mm:ss")) \\\n    .withColumn("symbol", col("value")[1]).withColumn("price", col("value")[2].cast(DoubleType()))\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a Time Window of 1 minute. Note that Time Windows are created by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," transformation followed by some kind of aggregation. This essentially means that we are creating aggregating windows of 1 minute each which will later on help to decide which events to keep or discard."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Group the data by window and word and compute the count of each group\nwindowedWords = stocksDF\\\n    .groupBy(window("EventTime", "1 minute"), stocksDF.symbol)\\\n    .agg(max("price").alias("maxPrice"))\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Lastly, write the data to the output console sink:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# This is like writing the data to the sink, console in this case\nquery = windowedWords \\\n    .writeStream \\\n    .outputMode(\"complete\") \\\n    .format(\"console\") \\\n    .option('truncate', 'false') \\\n    .start()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You can get the complete code of this example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/data-derp/exercise-vanilla-spark/blob/main/src/11%20-%20StreamingTumblingWindow.py"},"here")))),(0,i.kt)("p",null,"Run the application"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open a fresh terminal window and open netcat at port ",(0,i.kt)("inlineCode",{parentName:"li"},"9999")," as shown below:\n",(0,i.kt)("img",{alt:"Start-NetCat.png",src:a(1304).Z,width:"1618",height:"192"})),(0,i.kt)("li",{parentName:"ol"},"Run the above program from Pycharm. Press Ctrl+Shift+R on your keyboard to run this. Alternatively, you can also open the program in Pycharm and press the execute button as shown below.\n",(0,i.kt)("img",{alt:"Pycharm-Run-Program.png",src:a(5502).Z,width:"2800",height:"932"})),(0,i.kt)("li",{parentName:"ol"},"You should be able to see the first empty batch with ",(0,i.kt)("inlineCode",{parentName:"li"},"window"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"symbol")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"maxPrice")," columns."),(0,i.kt)("li",{parentName:"ol"},"Let us now send ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-04-24 12:00:05,AAPL,500")," as data from netcat terminal."),(0,i.kt)("li",{parentName:"ol"},"You should be able to see this data with corresponding time window being created in Pycharm output as below:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-1.png",src:a(1871).Z,width:"1752",height:"516"})),(0,i.kt)("li",{parentName:"ol"},"Try sending a similar data with changed price in the same time window with a changed timestamp: ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-04-24 12:00:45,AAPL,600"),". You should be able to see the ",(0,i.kt)("inlineCode",{parentName:"li"},"maxPrice")," column showing the maximum price of ",(0,i.kt)("inlineCode",{parentName:"li"},"600")," as shown below:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-2.png",src:a(9046).Z,width:"1772",height:"514"})),(0,i.kt)("li",{parentName:"ol"},"Send data for the next time window for the same symbol: ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-04-24 12:01:10,AAPL,100"),". You will see another record with the next window created and the latest price as below:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-3.png",src:a(29).Z,width:"1658",height:"550"})),(0,i.kt)("li",{parentName:"ol"},"Try sending another set of data for the new Time Window: ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-04-24 12:01:25,AAPL,200"),". You should be able to see the new window being updated with the latest maximum price. The previous window remains unchanged as seen below.\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-4.png",src:a(1444).Z,width:"1694",height:"568"}))),(0,i.kt)("p",null,"You\u2019ve now implemented aggregations across Tumbling Time Windows!"),(0,i.kt)("h3",{id:"handing-late-data"},"Handing Late Data"),(0,i.kt)("p",null,"You might have noticed that the above program is maintaining the data in the statestore forever, even though the Spark Application managed to segregate it into Tumbling Time Windows of 1 minute each. To further validate this, try sending some data to an older window ",(0,i.kt)("inlineCode",{parentName:"p"},"2023-04-24 12:00:50,AAPL,700")," assuming that it has arrived a bit late to your application. You will see the older window being updated with the latest maximum price of ",(0,i.kt)("inlineCode",{parentName:"p"},"700")," as below:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-5.png",src:a(675).Z,width:"1806",height:"548"}),"\nWhat happened ? The application retains all the data because we have defined the output mode as ",(0,i.kt)("inlineCode",{parentName:"p"},"Complete"),". As we have understood in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Output modes")," ",(0,i.kt)("a",{parentName:"p",href:"/data-sphere.github.io/docs/beyond-the-batch/spark-structured-streaming"},"section"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Complete")," output mode is designed to retain the data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"statestore")," forever. If we want our Spark Application to clean up the data for older windows and also stop accepting any late data in those windows (often a business decision/requirement), we will have to add what Spark calls as ",(0,i.kt)("inlineCode",{parentName:"p"},"Watermark")," to the application code."),(0,i.kt)("h3",{id:"data-clean-up-with-watermarks"},"Data Clean Up with Watermarks"),(0,i.kt)("p",null,"Watermarks are the expiry threshold that we set up in our programs after which the older windows and their data expire. This expiry threshold for watermarks is usually driven by business requirements. Since the older windows cease to exist when watermarks are set, any late data arriving for those windows is also ignored by Spark Applications. Let us make a few changes to our Tumbling Windows Application to enable watermarks to see them in action below (You can find the complete code of this implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/data-derp/exercise-vanilla-spark/blob/main/src/12%20-%20StreamingTumblingWindowWithWatermark.py"},"here"),"):"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following Watermark code (",(0,i.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#handling-late-data-and-watermarking"},"watermarks documentation"),") to the Tumbling Windows Code, just before the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," clause for the 1 minute window as below. We are keeping the Watermark expiry threshold of 2 minutes."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Group the data by window and word and compute the count of each group\n windowedWords = stocksDF\\\n     .withWatermark("EventTime", "2 minute") \\\n     .groupBy(window("EventTime", "1 minute"), stocksDF.symbol)\\\n     .agg(max("price").alias("maxPrice"))\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Change the output mode to ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," in the output sink as below"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# This is like writing the data to the sink, console in this case\nquery = windowedWords \\\n    .writeStream \\\n    .outputMode(\"update\") \\\n    .format(\"console\") \\\n    .option('truncate', 'false') \\\n    .start()\n")))),(0,i.kt)("p",null,"Let us now test this program with data streamed from the netcat application"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open a fresh terminal window and open netcat at port ",(0,i.kt)("inlineCode",{parentName:"p"},"9999")," as shown below:\n",(0,i.kt)("img",{alt:"Start-NetCat.png",src:a(1304).Z,width:"1618",height:"192"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the above program from Pycharm. Press Ctrl+Shift+R on your keyboard to run this. Alternatively, you can also open the program in Pycharm and press the execute button as shown below.\n",(0,i.kt)("img",{alt:"Pycharm-Run-Program.png",src:a(5502).Z,width:"2800",height:"932"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should be able to see the first empty batch with ",(0,i.kt)("inlineCode",{parentName:"p"},"window"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"symbol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"maxPrice")," columns.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us now send ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:00:05,AAPL,500")," as data from netcat terminal")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should be able to see this data with corresponding time window being created in PyCharm output as below. You might see an empty batch too but it is safe to ignore it as it is coming due to introducing Watermarks in our application code.\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-1.png",src:a(1871).Z,width:"1752",height:"516"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Try sending a similar data with changed price in the same time window with a changed timestamp: ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:00:45,AAPL,600"),". You should be able to see the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxPrice")," column being updated to ",(0,i.kt)("inlineCode",{parentName:"p"},"600")," in the same time window as below:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Batch-2.png",src:a(9046).Z,width:"1772",height:"514"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us send the data for the next time window for the same symbol ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:01:10,AAPL,100"),". You will see just the new record for the next time window as below.\n",(0,i.kt)("img",{alt:"Tumbling-Window-Watermark-Batch-5.png",src:a(3779).Z,width:"2046",height:"496"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The previous time window ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:00:00, 2023-04-24 12:01:00]")," is nicely preserved in the statestore, it is just not displayed above (this is a feature). To validate this, try sending some data to the previous window ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:00:50,AAPL,700"),". The previous window will now appear with the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"maxPrice"),". This time the next window ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:01:00, 2023-04-24 12:02:00]")," will be missing but that\u2019s alright isn\u2019t it?\n",(0,i.kt)("img",{alt:"Tumbling-Window-Watermark-Batch-7.png",src:a(7154).Z,width:"1634",height:"486"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Late data is still being processed by our application. That is because the Event data has still not reached the Watermark boundary. The Watermark boundary is calculated using the following formula:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Max (Event Time) - Watermark = Watermark Boundary")),(0,i.kt)("p",{parentName:"li"},"We can check if the Watermark Boundary has reached for the late data sent above. The time at which the latest event was sent is ",(0,i.kt)("strong",{parentName:"p"},"12:01:10")," (as per 2023-04-24 12:01:10,AAPL,100 record). So the calculation will be"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"12:01:10 - 2 mins (120 seconds) = 11:59:10")),(0,i.kt)("p",{parentName:"li"},"This means that all the windows ending before 11:59:10 will expire. The ending time window for our late data is 12:01:00 which is greater than the Watermark Boundary therefore the late date is processed by our application.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us now send the data that will create the new 3rd window ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:03:10,AAPL,100")," record. We should see a new window created for this data:\n",(0,i.kt)("img",{alt:"Tumbling-Window-Watermark-Batch-8.png",src:a(2526).Z,width:"1688",height:"550"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Calculate the Watermark boundary again:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"12:03:10 - 2 mins (120 seconds) = 12:01:10"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Watermark boundary comes as ",(0,i.kt)("strong",{parentName:"p"},"12:01:10")," as seen above. This is later than the end time window of our very first window which is ",(0,i.kt)("strong",{parentName:"p"},"12:01:00"),". This means if we send the late data again to the very first window, it should not be processed and also the data for that window should be dropped from the statestore. So let us send ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:00:50,AAPL,100")," again from our terminal. You should see the batch coming up empty as below. That is just Spark\u2019s way of showing that the older window is dropped and that the watermark is working. :-)\n",(0,i.kt)("img",{alt:"Tumbling-Window-Watermark-Batch-10.png",src:a(9409).Z,width:"1368",height:"442"})))),(0,i.kt)("h3",{id:"sliding-time-windows"},"Sliding Time Windows"),(0,i.kt)("p",null,"While Tumbling Time Windows fit well with use cases that require static buckets, it is necessary to employ Sliding Time Windows for use cases that require more flexibility, like calculating an average for a 1 minute window every 15 seconds. Sliding Time windows are aptly named as they slide across a data stream, or move as time progresses. Unlike Tumbling Windows, Sliding Windows are overlapping windows and a single event can belong to more than 1 window."),(0,i.kt)("p",null,"A sample use case requiring the usage of Sliding Time Windows could be: calculate the maximum price of a stock symbol in a stock market application every 30 seconds in 1 minute windows. The previous implementation of Tumbling Windows will not work here because new windows are required to be generated every 30 seconds (and they must overlap)."),(0,i.kt)("p",null,"We can see this Sliding Window in action:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a 3rd argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"30 seconds")," to the window declaration and also the aggregate function to max(price) as ",(0,i.kt)("inlineCode",{parentName:"p"},"MaximumPrice")," as shown in the code below. (As in the previous example, you can find the complete code of this example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/data-derp/exercise-vanilla-spark/blob/main/src/13%20-%20StreamingSlidingWindowWithWatermark.py"},"here"),"\n",(0,i.kt)("img",{alt:"Sliding-Window-Sliding-Argument.png",src:a(5186).Z,width:"1916",height:"352"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us now test this program with data streamed from the netcat application. Open a fresh terminal window and open netcat at port 9999 as shown below\n",(0,i.kt)("img",{alt:"Start-NetCat.png",src:a(1304).Z,width:"1618",height:"192"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the above program from Pycharm. Press Ctrl+Shift+R on your keyboard to run this. Alternatively, you can also open the program in Pycharm and press the execute button as shown below.\n",(0,i.kt)("img",{alt:"Pycharm-Run-Program.png",src:a(5502).Z,width:"2800",height:"932"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should be able to see the first empty batch with ",(0,i.kt)("inlineCode",{parentName:"p"},"window"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"symbol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"MaximumPrice")," columns.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us start with sending the first event from netcat as ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:05:15,AAPL,500"),". The output can be seen below:\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-1.png",src:a(2876).Z,width:"1986",height:"600"}),"\nTwo time windows are displayed in the output. The event time of the streaming data is 12:05:15 so as expected, the window ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]")," is displayed. Additionally, our event (streamed at 12:05:15) also is a member of the preceding and overlapping window ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),". Because the window duration is 1 minute and the sliding time is 30 seconds, this event falls into two windows.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us send another data event from netcat as ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:04:31,AAPL,450")," and check the output below:\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-3.png",src:a(8004).Z,width:"1696",height:"584"}),"\nThe data was streamed at 12:04:31 with a price of 450. This is a member of the ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]")," window. Now this window already had the MaximumPrice of 500 from the previous micro-batch. The resulting aggregated value under MaximumPrice remains at 500 because the existing value (500) is greater than the value of the event of the current microbatch (450)."),(0,i.kt)("p",{parentName:"li"},"Since we have defined the ",(0,i.kt)("inlineCode",{parentName:"p"},"sliding time")," as 30 seconds, the value (450) streamed at 12:04:31 also registers itself in the ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]")," time window, which is why we also see that window in the above output."),(0,i.kt)("p",{parentName:"li"},"Let us take a moment now to summarize the total number of sliding windows we have in the state store as of"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Window"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Maximum Price"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Persisted in statestore ?"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Appears in the output ?"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"450"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let us now send another data event from netcat as ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:05:31,AAPL,460")," and check the output below\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-4.png",src:a(2148).Z,width:"1718",height:"608"})),(0,i.kt)("p",{parentName:"li"},"The data was streamed at ",(0,i.kt)("strong",{parentName:"p"},"12:05:31")," with ",(0,i.kt)("strong",{parentName:"p"},"460")," as the price. This registers it under the ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]")," window which already has the MaximumPrice of 500 from the previous micro-batch and because 500 is greater than 460, the MaximumPrice is remains at 500. This additionally validates that the window had been in the statestore from the previous micro-batch."),(0,i.kt)("p",{parentName:"li"},"Like the previous micro-batch, the event also registers itself in the ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:05:30, 2023-04-24 12:06:30]")," time window, which is also displayed in the above output."),(0,i.kt)("p",{parentName:"li"},"In summary, we have 4 windows in statestore now as below"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Window"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Maximum Price"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Persisted in statestore"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Appears in the output"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"450"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:30, 2023-04-24 12:06:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"460"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let\u2019s send an event in the time range of the oldest window that we have in the statestore to prove that it still exists. Send a data event from netcat as ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:04:32,AAPL,470")," and check the output:\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-6.png",src:a(3628).Z,width:"1740",height:"588"})),(0,i.kt)("p",{parentName:"li"},"We do indeed see the oldest window appearing with the MaximumPrice of 470 and we also see a second window. The 3rd and 4th windows are not displayed, but from previous experience, we know that they are still in the statestore !"))),(0,i.kt)("p",null,"You might have observed that all the data above 4 windows is saved in the statestore even though we have a Watermark declaration of 2 minutes. This is happening because the application has not yet not reached the Watermark Expiry Threshold as we have seen in the Tumbling Windows example."),(0,i.kt)("h3",{id:"sliding-time-windows-with-watermarks"},"Sliding Time Windows with Watermarks"),(0,i.kt)("p",null,"Similar to our Tumbling Windows example, we\u2019ll also need to handle late data in Sliding Time Windows. Similarly, we\u2019ll use Watermarks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We\u2019ll start from where we left off in the Sliding Window example:\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-6.png",src:a(3628).Z,width:"1740",height:"588"}),"\nNote that the following 4 windows are in the statestore:"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Window"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Maximum Price"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Persisted in statestore"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Appears in the output"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"470"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:30, 2023-04-24 12:06:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"460"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Send a new event:  ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:07:01,AAPL,480")," and check the output:\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-7.png",src:a(8064).Z,width:"1862",height:"604"}),"\nThere is nothing unexpected here. We have two new windows created making it a total of 6 active sliding windows:"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Window"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Maximum Price"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Persisted in statestore"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Appears in the output"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"470"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:00, 2023-04-24 12:06:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"500"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:05:30, 2023-04-24 12:06:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"460"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:06:30, 2023-04-24 12:07:30]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"480"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"[2023-04-24 12:07:00, 2023-04-24 12:08:00]"),(0,i.kt)("td",{parentName:"tr",align:"center"},"480"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"),(0,i.kt)("td",{parentName:"tr",align:"center"},"True"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Send a new event ",(0,i.kt)("strong",{parentName:"p"},"2023-04-24 12:04:33,AAPL,490")," from the terminal. This should hypothetically register itself with  two windows in the statestore: ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]")," and ",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),"\n",(0,i.kt)("img",{alt:"Sliding-Window-Batch-9.png",src:a(7513).Z,width:"1794",height:"538"}),"\nHowever, we only see that it has registered itself with the second window (",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),"). When in doubt, check the Watermark Expiry Threshold, using the below formula:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Max (Event Time) - Watermark = Watermark Boundary")),(0,i.kt)("p",{parentName:"li"},"The event time from the data sent in previous step is 12:07:01 (represents the max event time) so the calculation is represented as:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"12:07:01 - 2 minutes (Watermark) = 12:05:01")),(0,i.kt)("p",{parentName:"li"},"Our current Watermark Expiry Threshold is therefore 12:05:01, which is later than the    end interval of our very first Window (",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:00, 2023-04-24 12:05:00]"),"), which in turn explains why our data was not registered against that window. In other words,  our very first window  expired and no additional data can be registered here (it is ignored). The data shown above is from our 2nd window (",(0,i.kt)("strong",{parentName:"p"},"[2023-04-24 12:04:30, 2023-04-24 12:05:30]"),"). This is within the Watermark Expiry Threshold;  therefore, the 2nd window is still active and exists in the statestore. The other 4 windows are also in the statestore but are simply not displayed."))),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"In this section, we\u2019ve learned about how to aggregate data in both Tumbling and Sliding Time Windows which is used in situations where aggregations are made on ","[near]"," real-time data. We\u2019ve additionally learned how to handle late data with both types of Windows, which is a very common and realistic occurrence, and under what circumstances data remains in the statestore."))}h.isMDXComponent=!0},5502:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Pycharm-Run-Program-813daa7233060b42a840ca452014024f.png"},2876:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-1-a6796fdfab17c89c4b26a06f6a60d024.png"},8004:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-3-e0bbc1c374a678fb30d168af42221e01.png"},2148:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-4-4f702fef012c7265df33dbe2fa438651.png"},3628:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-6-d5f50b40eedf4d049068cb1c0f05fc33.png"},8064:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-7-79c91b9172509f3ea6a46489735b669d.png"},7513:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Batch-9-1577578cd8d89bd731d8ae525466b5f3.png"},5186:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sliding-Window-Sliding-Argument-1ede9ee47142bf1820dce1bcd58c5419.png"},1304:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Start-NetCat-980ebc8ba58636da4098cb08f08c9933.png"},1871:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Batch-1-77282896f64368985aafa6f564c64985.png"},9046:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Batch-2-5d201298e98d58167fe5f5d17cdb356b.png"},29:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Batch-3-3a9f6f411332604b07446ae0972ac5f9.png"},1444:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Batch-4-1a7974483431c16ec514260127bd9543.png"},675:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Batch-5-098480ab76a4732192ecd986b369e28b.png"},9409:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Watermark-Batch-10-9b267afcc87d28971029f07e46d83d99.png"},3779:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Watermark-Batch-5-5bba443b656910445cf2e2b05901aacd.png"},7154:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Watermark-Batch-7-9efe97a95d9c627eabb83d1d992e7288.png"},2526:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Tumbling-Window-Watermark-Batch-8-2d26ee8aaa6767cea91c70a61ee36fc5.png"}}]);